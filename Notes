* Efficiency
  ** Subrs, or any subr/nsubr that takes 0 args, don't need to allocate stack space for their result, they can operate on dst directly
  *** Their args are known to be in a new arglist on the stack, or they have no args
* Weak pointers
** References to sexprs that do not affect reference counts, to prevent reference loops
** But reference loops still possible, e.g.
(setq d (dict))
(atput d 'dict d)
* Packed arrays
** Multidimenional arrays of numeric types
* Complex numbers - DONE
* Call "eval" through apply, not directly
** Not needed
* More refined functions forms
** Positional vs. list, evaluated vs. unevaluated
** Created lambda*, positional + unevaluated
* Add Environment sx type - DONE
** env frame pointer
** (current) gets current environment
** (up env) moves up
** (enter env) enters it
*** enter accepts: env, closure, dict, module
* Libraries
** Serialize
** Stream
** JSON
** YAML
** XML
** HTTP
** GTK
* Bugs
** Trace level thrown off by longjmps - DONE

* Object-oriented
** "C" objects + "Lisp" objects...?
*** "C" instances are byte-arrays + instance_of + ptr to hooks struct (mark, free, cleanup)
*** "Lisp" instances are dictionaries + instance_of
*** A class is a structure, with parent, name, instance_methods, class_methods, class_variables, hooks
*** A class is just a dictionary of methods, i.e. functions
*** Also internal methods for "C" objects: mark, free, cleanup
** (method-call recvr sel args...)
*** Find class of which recvr is an instance => dictionary of methods D
*** Look up selector sel in D => function F
*** Call F(recvr, args...)
** One big dictionary, for all class stuff
*** Entries like <class>.parent, <class>.instance-methods.<method>
*** Dictionary lookup should be fast...
*** Objects (instances) carry *name* (sym) of class they belong to
*** Downside
**** "Classes" are not reclaimed, "one big dictionary" just grows ad infinitum

* Syntactic sugar
** [ ... ] => '( ... ) -  NO
** { ... } => '(( . ) ... ( . )) - NO

* Unit test

* Clean up / refinements / etc
** VM state restored by sx_apply, no need to restore in code funcs - DONE
** Make args for subrs a list - DONE
** Passing command-line arguments - DONE
** Better backtracing, show evalated args, not form being evaluated - DONE

* Optimizations
** Change check for built-in strings, e.g. "quote", "lambda", to check for symbol (identical sx) - DONE

* Better memory management
** Eval and frame stack sizes set at init - DONE
** Garbage collection

* More libraries
** OS
** Sockets
** Regexps - DONE

* Threads

* Module sharing

* Write and read compiled form
** Compiled file has magic leader, e.g. ";;\\compiled"
** TLV format
*** type ::= b/e t t t t t l l
b/e  = begin/end marker
    0 <=> begin
    1 <=> end

t = type
    0 <=> nil
    1 <=> dptr (pair)
    2 <=> list
    3 <=> list-dptr (list with atom as cdr)
    ...

l = length encoding
    0 <=> 1-byte length
    1 <=> 2-byte length
    2 <=> 3-byte length
    3 <=> 4-byte length

*** length ::= 1, 2, 3, or 4 bytes; see above
**** Only present for symbols or strings
**** No need to include null terminator

*** value

* Stream-based input - DONE

* Exceptions - DONE

* Loading shared libs - DONE

Local Variables:
mode: org
End:
